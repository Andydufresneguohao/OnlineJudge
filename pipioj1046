//pipioj1046
//题目描述
// PIPI得到了一个数组作为他的新年礼物，他非常喜欢这个数组！
// 在仔细研究了几天之后，PIPI成功的将这个数组拆成了若干段，并且每段的和都不为0！
// 现在PIPI希望知道，这样的拆分方法一共有多少种？
// 两种拆分方法被视作不同，当且仅当数组断开的所有位置组成的集合不同。


//解题思路,长度为i的数组的拆分方式总数dp[i]
//dp[i] = (dp[i-1]+...dp[1]) - (dp[j],dp[k]...)(dp[j]的条件是sum[j]=sum[i]，即意味者最后面一段和为0)
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e5+10;
const int mod= 1e9+7;
ll n,ans,dp[N],sum;

map<ll,ll> Hash;

int main(){
    int  i,x;
    while(scanf("%d",&n)!=EOF){
        Hash.clear();sum=0;Hash[0]=1;ans=1;
        for(i=0;i<n;i++){
            scanf("%d",&x);
            sum+=x;
            dp[i]=(ans-Hash[sum]+mod)%mod; ///ans 可能比Hash[sum]小
            Hash[sum]=(Hash[sum]+dp[i])%mod;
            ans=(ans+dp[i])%mod;    
        }
        printf("%d\n",dp[n-1]);
    }//
   return 0;
}
